/*
 *      Copyright (c) 2018-2028, Chill Zhuang All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.
 *  Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  Neither the name of the dreamlu.net developer nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *  Author: Chill 庄骞 (smallchill@163.com)
 */
package $!{package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.AllArgsConstructor;
import javax.validation.Valid;

import org.springblade.core.mp.support.Condition;
import org.springblade.core.mp.support.Query;
import org.springblade.system.feign.IDictClient;
import org.springblade.core.tool.api.R;
import org.springblade.core.tool.utils.Func;
import org.springframework.web.bind.annotation.*;
#if($!{superEntityClass})
import org.springframework.web.bind.annotation.RequestParam;
#end
import com.baomidou.mybatisplus.core.metadata.IPage;
import $!{package.Entity}.$!{entity};
#set($voPackage=$package.Entity.replace("entity","vo"))
import $!{voPackage}.$!{entity}VO;
#set($wrapperPackage=$package.Entity.replace("entity","wrapper"))
import $!{wrapperPackage}.$!{entity}Wrapper;
import $!{package.Service}.$!{table.serviceName};
#if($!{superControllerClassPackage})
import $!{superControllerClassPackage};
#end
#if(!$!{superEntityClass})
#end
import java.util.List;

/**
 * $!{table.comment} 控制器
 *
 * @author $!{author}
 * @since $!{date}
 */
@RestController
@AllArgsConstructor
@RequestMapping("#if($!{package.ModuleName})/$!{package.ModuleName}#end/$!{cfg.entityKey}")
@Api(value = "$!{table.comment}", tags = "$!{table.comment}接口")
#if($!{superControllerClass})
public class $!{table.controllerName} extends $!{superControllerClass} {
#else
public class $!{table.controllerName} {
#end

	private $!{table.serviceName} $!{table.entityPath}Service;

	private IDictClient dictClient;

	/**
	* 详情
	*/
	@GetMapping("/detail")
	@ApiOperation(value = "详情", notes = "传入$!{table.entityPath}", position = 1)
	public R<$!{entity}VO> detail($!{entity} $!{table.entityPath}) {
		$!{entity} detail = $!{table.entityPath}Service.getOne(Condition.getQueryWrapper($!{table.entityPath}));
		$!{entity}Wrapper $!{table.entityPath}Wrapper = new $!{entity}Wrapper(dictClient);
		return R.data($!{table.entityPath}Wrapper.entityVO(detail));
	}

	/**
	* 分页 $!{table.comment}
	*/
	@GetMapping("/list")
	@ApiOperation(value = "分页", notes = "传入$!{table.entityPath}", position = 2)
	public R<IPage<$!{entity}VO>> list($!{entity} $!{table.entityPath}, Query query) {
		IPage<$!{entity}> pages = $!{table.entityPath}Service.page(Condition.getPage(query), Condition.getQueryWrapper($!{table.entityPath}));
		$!{entity}Wrapper $!{table.entityPath}Wrapper = new $!{entity}Wrapper(dictClient);
		return R.data($!{table.entityPath}Wrapper.pageVO(pages));
	}

	/**
	* 自定义分页 $!{table.comment}
	*/
	@GetMapping("/page")
	@ApiOperation(value = "分页", notes = "传入$!{table.entityPath}", position = 3)
	public R<IPage<$!{entity}VO>> page($!{entity}VO $!{table.entityPath}, Query query) {
		IPage<$!{entity}VO> pages = $!{table.entityPath}Service.select$!{entity}Page(Condition.getPage(query), $!{table.entityPath});
		return R.data(pages);
	}

	/**
	* 新增 $!{table.comment}
	*/
	@PostMapping("/save")
	@ApiOperation(value = "新增", notes = "传入$!{table.entityPath}", position = 4)
	public R save(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
		return R.status($!{table.entityPath}Service.save($!{table.entityPath}));
	}

	/**
	* 修改 $!{table.comment}
	*/
	@PostMapping("/update")
	@ApiOperation(value = "修改", notes = "传入$!{table.entityPath}", position = 5)
	public R update(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
		return R.status($!{table.entityPath}Service.updateById($!{table.entityPath}));
	}

	/**
	* 新增或修改 $!{table.comment}
	*/
	@PostMapping("/submit")
	@ApiOperation(value = "新增或修改", notes = "传入$!{table.entityPath}", position = 6)
	public R submit(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
		return R.status($!{table.entityPath}Service.saveOrUpdate($!{table.entityPath}));
	}

	#if($!{superEntityClass})

	/**
	* 删除 $!{table.comment}
	*/
	@PostMapping("/remove")
	@ApiOperation(value = "逻辑删除", notes = "传入ids", position = 7)
	public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
		return R.status($!{table.entityPath}Service.deleteLogic(Func.toIntList(ids)));
	}

	#else

	/**
	* 删除 $!{table.comment}
	*/
	@PostMapping("/remove")
	@ApiOperation(value = "删除", notes = "传入ids", position = 7)
	public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
		return R.status($!{table.entityPath}Service.removeByIds(Func.toIntList(ids)));
	}

	#end

}
